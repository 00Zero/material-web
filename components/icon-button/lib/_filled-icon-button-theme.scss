//
// Copyright 2022 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

@use 'sass:map';
@use '../../compat/theme/state';
@use '../../sass/resolvers';
@use '../../sass/color';
@use '../../sass/theme';
@use '../../tokens';
@use './icon-button-theme';
@use 'third_party/javascript/material_web_components/m3/ripple/ripple-theme';

$_custom-property-prefix: 'filled-icon-button';

$light-theme: tokens.md-comp-filled-icon-button-values();
$dark-theme: tokens.md-comp-filled-icon-button-values(
  (
    md-sys-color: tokens.md-sys-color-values-dark-dynamic(),
  ),
  $exclude-hardcoded-values: true
);

@mixin theme($theme) {
  $theme: theme.validate-theme($light-theme, $theme);
  $theme: icon-button-theme.flatten-disabled-colors($theme);
  $theme: theme.create-theme-vars($theme, $_custom-property-prefix);

  @include theme.emit-theme-vars($theme);
}

@mixin theme-styles($theme, $resolvers: resolvers.$material) {
  $theme: theme.validate-theme-styles($light-theme, $theme);
  $theme: icon-button-theme.flatten-disabled-colors($theme);
  $theme: theme.create-theme-vars($theme, $_custom-property-prefix);

  @include icon-button-theme.state-layer-size(
    map.get($theme, 'container-size')
  );
  @include icon-button-theme.state-layer-shape(
    map.get($theme, 'container-shape')
  );
  @include icon-button-theme.icon-size(map.get($theme, 'icon-size'));

  @include icon-button-theme.icon-color(
    (
      default: map.get($theme, 'icon-color'),
      disabled: map.get($theme, 'disabled-icon-color'),
      focus: map.get($theme, 'focus-icon-color'),
      hover: map.get($theme, 'hover-icon-color'),
      pressed: map.get($theme, 'pressed-icon-color'),
    )
  );

  @include ripple-theme.theme(
    (
      focus-state-layer-color: map.get($theme, 'focus-state-layer-color'),
      focus-state-layer-opacity: map.get($theme, 'focus-state-layer-opacity'),
      hover-state-layer-color: map.get($theme, 'hover-state-layer-color'),
      hover-state-layer-opacity: map.get($theme, 'hover-state-layer-opacity'),
      pressed-state-layer-color: map.get($theme, 'pressed-state-layer-color'),
      pressed-state-layer-opacity:
        map.get($theme, 'pressed-state-layer-opacity'),
    )
  );

  @include _container-color(
    (
      default: map.get($theme, 'container-color'),
      disabled: map.get($theme, 'disabled-container-color'),
    )
  );
}

///
/// Sets the container color to the given color.
/// @param {map} $color-map - The desired icon color, specified as a map of
///     colors with states {default, disabled} as keys.
///
@mixin _container-color($color-map) {
  @include _set-container-color(state.get-default-state($color-map));

  $disabled: state.get-disabled-state($color-map);
  &:disabled {
    @include _set-container-color($disabled);
  }
}

///
/// Sets the container color to the provided color value.
/// @param {Color} $color - The desired background color.
///
@mixin _set-container-color($color) {
  background-color: $color;
}
