//
// Copyright 2022 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// stylelint-disable selector-class-pattern --
// Selector '.md3-*' should only be used in this project.

@use 'sass:map';
@use '@material/animation/animation';
@use '@material/dom/dom';
@use '@material/ripple/ripple';
@use '@material/ripple/ripple-theme';
@use '@material/touch-target/mixins' as touch-target-mixins;
@use '@material/touch-target/variables' as touch-target-variables;
@use './radio-theme';
@use '@material/focusring/focus-ring';

$ripple-target: radio-theme.$ripple-target;

///
/// Radio core styles.
///
@mixin core-styles() {
  @include without-ripple();
  @include ripple();
}

@mixin static-styles() {
  .md3-radio {
    display: inline-block;
    position: relative;
    flex: 0 0 auto;
    box-sizing: content-box;
    width: radio-theme.$icon-size;
    height: radio-theme.$icon-size;
    cursor: pointer;
    /* @alternate */
    will-change: opacity, transform, border-color, color;

    // Container for radio circles and ripple.
    &__background {
      display: inline-block;
      position: relative;
      box-sizing: border-box;
      width: radio-theme.$icon-size;
      height: radio-theme.$icon-size;

      &::before {
        position: absolute;
        transform: scale(0, 0);
        border-radius: 50%;
        opacity: 0;
        pointer-events: none;
        content: '';

        transition: exit(opacity), exit(transform);
      }
    }

    &__outer-circle {
      position: absolute;
      top: 0;
      left: 0;
      box-sizing: border-box;
      width: 100%;
      height: 100%;
      border-width: 2px;
      border-style: solid;
      border-radius: 50%;

      transition: exit(border-color);
    }

    &__inner-circle {
      position: absolute;
      top: 0;
      left: 0;
      box-sizing: border-box;
      width: 100%;
      height: 100%;
      transform: scale(0, 0);
      border-width: 10px;
      border-style: solid;
      border-radius: 50%;

      transition: exit(transform), exit(border-color);
    }

    &__native-control {
      position: absolute;
      margin: 0;
      padding: 0;
      opacity: 0;
      cursor: inherit;
      z-index: 1;
    }

    &--touch {
      @include touch-target-mixins.margin(
        $component-height: radio-theme.$ripple-size,
        $component-width: radio-theme.$ripple-size
      );
      @include radio-theme.touch-target($size: touch-target-variables.$height);
    }

    @include ripple-theme.focus {
      .md3-radio__focus-ring {
        @include focus-ring.focus-ring(
          $container-outer-padding-vertical: 0,
          $container-outer-padding-horizontal: 0
        );
      }
    }
  }

  .md3-radio__native-control:checked,
  .md3-radio__native-control:disabled {
    + .md3-radio__background {
      transition: enter(opacity), enter(transform);

      .md3-radio__outer-circle {
        transition: enter(border-color);
      }

      .md3-radio__inner-circle {
        transition: enter(transform), enter(border-color);
      }
    }
  }

  .md3-radio--disabled {
    cursor: default;
    pointer-events: none;
  }

  .md3-radio__native-control:checked {
    + .md3-radio__background {
      .md3-radio__inner-circle {
        transform: scale(0.5);

        transition: enter(transform), enter(border-color);
      }
    }
  }

  .md3-radio__native-control:disabled,
  [aria-disabled='true'] .md3-radio__native-control {
    + .md3-radio__background {
      cursor: default;
    }
  }

  .md3-radio__native-control:focus {
    + .md3-radio__background::before {
      transform: scale(1);
      opacity: map.get(ripple-theme.$dark-ink-opacities, focus);

      transition: enter(opacity), enter(transform);
    }
  }
}

// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other
// radio styles. It is recommended that most users use `md3-radio-core-styles` instead.
@mixin without-ripple() {
  // postcss-bem-linter: define radio
  // @include touch-target-mixins.wrapper(); // COPYBARA_COMMENT_THIS_LINE

  .md3-radio {
    @include radio-theme.unchecked-stroke-color(radio-theme.$unchecked-color);
    @include radio-theme.checked-stroke-color(
      radio-theme.$baseline-theme-color
    );
    @include radio-theme.ink-color(radio-theme.$baseline-theme-color);
    @include radio-theme.disabled-unchecked-stroke-color(
      radio-theme.$disabled-circle-color
    );
    @include radio-theme.disabled-checked-stroke-color(
      radio-theme.$disabled-circle-color
    );
    @include radio-theme.disabled-ink-color(radio-theme.$disabled-circle-color);
    @include radio-theme.focus-indicator-color(
      radio-theme.$baseline-theme-color
    );
    @include radio-theme.density(radio-theme.$density-scale);

    @include dom.forced-colors-mode {
      &.md3-radio--disabled {
        @include radio-theme.disabled-unchecked-stroke-color(GrayText);
        @include radio-theme.disabled-checked-stroke-color(GrayText);
        @include radio-theme.disabled-ink-color(GrayText);
      }
    }
  }

  @include static-styles();
  // postcss-bem-linter: end
}

// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other
// radio styles. It is recommended that most users use `md3-radio-core-styles` instead.
@mixin ripple() {
  // @include ripple.common(); // COPYBARA_COMMENT_THIS_LINE

  .md3-radio {
    @include ripple.surface($ripple-target: $ripple-target);
    @include ripple.radius-unbounded($ripple-target: $ripple-target);
    @include ripple-theme.states(
      $color: radio-theme.$baseline-theme-color,
      $ripple-target: $ripple-target
    );

    &.md3-ripple-upgraded,
    &.md3-ripple-upgraded--background-focused {
      .md3-radio__background::before {
        content: none;
      }
    }
  }

  #{$ripple-target} {
    @include ripple.target-common();
  }
}

@function enter($name) {
  @return animation.enter($name, radio-theme.$transition-duration);
}

@function exit($name) {
  @return animation.exit-temporary($name, radio-theme.$transition-duration);
}
