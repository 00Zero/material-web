//
// Copyright 2022 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// This file contains common theme mixins that are shared across icon button
// variants.

@use 'sass:map';

@use '../../ripple/ripple-theme';
@use '../../sass/color';
@use '../../sass/theme';
@use '../../tokens';

@mixin theme-styles($theme) {
  $touch-target-height: 48px;

  height: map.get($theme, container-size);
  width: map.get($theme, container-size);
  margin: max(
    0px,
    calc((#{$touch-target-height} - #{map.get($theme, container-size)}) / 2)
  );
  font-size: map.get($theme, icon-size);
  border-radius: map.get($theme, 'container-shape');

  i,
  svg,
  img {
    height: map.get($theme, icon-size);
    width: map.get($theme, icon-size);
  }
}

///
// Flattens disabled colors for icon button theme keys (across all variants).
/// @param {String} $variant - The variant, specified as one of ('filled',
///     'outlined', 'standard').
///
@function flatten-disabled-colors($theme, $variant: 'standard') {
  // If opacity value is null (e.g. for dark theme map, only the color
  // changes, so the opacity value is null), use the default opacity value.
  // Otherwise, the color is not flattened, meaning that the color would
  // be applied without any opacity, which is incorrect.
  $opacity-keys: [ 'disabled-container-opacity', 'disabled-icon-opacity',
    'disabled-outline-opacity', 'disabled-selected-container-opacity' ];

  @each $opacity-key in $opacity-keys {
    // If opacity value is null, use the opacity value from the default tokens.
    @if not map.get($theme, $opacity-key) {
      $light-theme-value: map.get(
        tokens.md-comp-icon-button-values(),
        $opacity-key
      );
      $light-theme-filled-value: map.get(
        tokens.md-comp-filled-icon-button-values(),
        $opacity-key
      );
      $light-theme-filled-tonal-value: map.get(
        tokens.md-comp-filled-tonal-icon-button-values(),
        $opacity-key
      );
      $light-theme-outlined-value: map.get(
        tokens.md-comp-outlined-icon-button-values(),
        $opacity-key
      );

      @if $variant == 'standard' and $light-theme-value {
        $theme: map.set($theme, $opacity-key, $light-theme-value);
      } @else if $variant == 'filled' and $light-theme-filled-value {
        $theme: map.set($theme, $opacity-key, $light-theme-filled-value);
      } @else if $variant == 'filled-tonal' and $light-theme-filled-tonal-value
      {
        $theme: map.set($theme, $opacity-key, $light-theme-filled-tonal-value);
      } @else if $variant == 'outlined' and $light-theme-outlined-value {
        $theme: map.set($theme, $opacity-key, $light-theme-outlined-value);
      }
    }
  }

  @return color.join-color-and-opacity-pairs(
    $theme,
    (
      (
        color-key: 'disabled-container-color',
        opacity-key: 'disabled-container-opacity'
      ),
      (color-key: 'disabled-icon-color', opacity-key: 'disabled-icon-opacity'),
      (
        color-key: 'disabled-outline-color',
        opacity-key: 'disabled-outline-opacity'
      ),
      (
        color-key: 'disabled-selected-container-color',
        opacity-key: 'disabled-selected-container-opacity'
      )
    )
  );
}
