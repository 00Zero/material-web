//
// Copyright 2021 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

@use 'sass:map';
@use '../../sass/resolvers';
@use '../../sass/theme';
@use '../../tokens';
@use './fab-shared-theme';

$surface-theme: tokens.md-comp-fab-surface-values();

@mixin surface-small-theme() {
  $surface-small-theme: tokens.md-comp-fab-surface-small-values();
  @include theme($surface-small-theme);
}

@mixin surface-large-theme() {
  $surface-large-theme: tokens.md-comp-fab-surface-large-values();
  @include theme($surface-large-theme);
}

@mixin primary-small-theme() {
  $primary-small-theme: tokens.md-comp-fab-primary-small-values();
  @include theme($primary-small-theme);
}

@mixin primary-theme() {
  $primary-theme: tokens.md-comp-fab-primary-values();
  @include theme($primary-theme);
}

@mixin primary-large-theme() {
  $primary-large-theme: tokens.md-comp-fab-primary-large-values();
  @include theme($primary-large-theme);
}

@mixin secondary-small-theme() {
  $secondary-small-theme: tokens.md-comp-fab-secondary-small-values();
  @include theme($secondary-small-theme);
}

@mixin secondary-theme() {
  $secondary-theme: tokens.md-comp-fab-secondary-values();
  @include theme($secondary-theme);
}

@mixin secondary-large-theme() {
  $secondary-large-theme: tokens.md-comp-fab-secondary-large-values();
  @include theme($secondary-large-theme);
}

@mixin tertiary-small-theme() {
  $tertiary-small-theme: tokens.md-comp-fab-tertiary-small-values();
  @include theme($tertiary-small-theme);
}

@mixin tertiary-theme() {
  $tertiary-theme: tokens.md-comp-fab-tertiary-values();
  @include theme($tertiary-theme);
}

@mixin tertiary-large-theme() {
  $tertiary-large-theme: tokens.md-comp-fab-tertiary-large-values();
  @include theme($tertiary-large-theme);
}

@mixin branded-theme() {
  $branded-theme: tokens.md-comp-fab-branded-values();
  @include theme($branded-theme);
}

@mixin branded-large-theme() {
  $branded-large-theme: tokens.md-comp-fab-branded-large-values();
  @include theme($branded-large-theme);
}

@mixin theme($theme, $resolvers: resolvers.$material) {
  $theme: theme.validate-theme($surface-theme, $theme);
  $theme: _resolve-theme($theme, $resolvers);
  $theme: theme.create-theme-vars($theme, fab);

  @include theme.emit-theme-vars($theme);
}

@mixin theme-styles($theme, $resolvers: resolvers.$material) {
  $theme: theme.validate-theme-styles($surface-theme, $theme);
  $theme: _resolve-theme($theme, $resolvers);
  $theme: theme.create-theme-vars($theme, fab);

  & {
    @each $token, $value in $theme {
      --_#{$token}: #{$value};
    }
  }

  & {
    width: var(--_container-width);
    height: var(--_container-height);
  }
}

@function _resolve-theme($theme, $resolvers) {
  @return fab-shared-theme.resolve-theme($theme, $resolvers);
}
