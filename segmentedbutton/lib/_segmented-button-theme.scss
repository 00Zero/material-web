//
// Copyright 2022 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// stylelint-disable selector-class-pattern --
// Selector '.md3-*' should only be used in this project.

@use 'sass:map';
@use '../../ripple/ripple-theme';
@use '../../sass/color';
@use '../../sass/typography';

@mixin theme-styles($theme) {
  padding-inline-start: map.get($theme, 'spacing-leading');
  padding-inline-end: map.get($theme, 'spacing-trailing');

  &.md3-segmented-button--unselected {
    .md3-segmented-button__icon {
      color: map.get($theme, 'unselected-with-icon-icon-color');
    }

    &:hover {
      .md3-segmented-button__icon {
        color: map.get($theme, 'unselected-hover-icon-color');
      }
    }

    &:focus {
      .md3-segmented-button__icon {
        color: map.get($theme, 'unselected-focus-icon-color');
      }
    }

    &:active {
      .md3-segmented-button__icon {
        color: map.get($theme, 'unselected-pressed-icon-color');
      }
    }

    &:disabled {
      .md3-segmented-button__icon {
        color: map.get($theme, 'disabled-icon-color');
      }
    }

    @include ripple-theme.theme(
      (
        hover-state-layer-color:
          map.get($theme, 'unselected-hover-state-layer-color'),
        hover-state-layer-opacity: map.get($theme, 'hover-state-layer-opacity'),
        focus-state-layer-color:
          map.get($theme, 'unselected-focus-state-layer-color'),
        focus-state-layer-opacity: map.get($theme, 'focus-state-layer-opacity'),
        pressed-state-layer-color:
          map.get($theme, 'unselected-pressed-state-layer-color'),
        pressed-state-layer-opacity:
          map.get($theme, 'pressed-state-layer-opacity'),
      )
    );
  }

  &.md3-segmented-button--selected {
    background-color: map.get($theme, 'selected-container-color');

    .md3-segmented-button__icon {
      color: map.get($theme, 'selected-with-icon-icon-color');
    }

    .md3-segmented-button__checkmark-path {
      stroke: map.get($theme, 'selected-with-icon-icon-color');
    }

    &:hover {
      .md3-segmented-button__checkmark-path {
        stroke: map.get($theme, 'selected-hover-icon-color');
      }
    }

    &:focus {
      .md3-segmented-button__checkmark-path {
        stroke: map.get($theme, 'selected-focus-icon-color');
      }
    }

    &:active {
      .md3-segmented-button__checkmark-path {
        stroke: map.get($theme, 'selected-pressed-icon-color');
      }
    }

    &:disabled {
      .md3-segmented-button__checkmark-path {
        stroke: map.get($theme, 'disabled-icon-color');
      }
    }

    @include ripple-theme.theme(
      (
        hover-state-layer-color:
          map.get($theme, 'selected-hover-state-layer-color'),
        hover-state-layer-opacity: map.get($theme, 'hover-state-layer-opacity'),
        focus-state-layer-color:
          map.get($theme, 'selected-focus-state-layer-color'),
        focus-state-layer-opacity: map.get($theme, 'focus-state-layer-opacity'),
        pressed-state-layer-color:
          map.get($theme, 'selected-pressed-state-layer-color'),
        pressed-state-layer-opacity:
          map.get($theme, 'pressed-state-layer-opacity'),
      )
    );
  }

  .md3-segmented-button__outline {
    border-color: map.get($theme, 'outline-color');
  }

  &:disabled .md3-segmented-button__outline {
    border-color: map.get($theme, 'disabled-outline-color');
  }

  .md3-segmented-button__graphic,
  .md3-segmented-button__checkmark,
  .md3-segmented-button__icon,
  .md3-segmented-button__icon ::slotted([slot='icon']) {
    height: map.get($theme, 'with-icon-icon-size');
    width: map.get($theme, 'with-icon-icon-size');
    font-size: map.get($theme, 'with-icon-icon-size');
  }

  // Under the following conditions, we need to account for extra space between
  // the graphic and the text label/icon content:
  //
  //   1. A button with an icon and a label.
  //   2. A selected button with a label and checkmark.
  //   3. A selected button with an icon and checkmark but no label.
  //
  // We calculate a larger width here instead of using padding or margin for
  // two main reasons:
  //
  //   1. We may need to transition between a zero width and an explicit width.
  //   2. Both margin and padding take up space when a node has child content
  //      even when a zero width is set and overflow is set to hidden.
  //
  // Because of those reasons, we calculate a new width with the given values.
  &.md3-segmented-button--with-icon.md3-segmented-button--with-label,
  &.md3-segmented-button--selected.md3-segmented-button--with-label.md3-segmented-button--with-checkmark,
  &.md3-segmented-button--selected.md3-segmented-button--without-label.md3-segmented-button--with-checkmark {
    .md3-segmented-button__graphic {
      // TODO(b/198759625): Use padding token instead of hardcoded 8px value.
      width: calc(map.get($theme, 'with-icon-icon-size') + 8px);
    }
  }

  .md3-segmented-button__label-text {
    font-family: map.get($theme, 'label-text-font');
    font-size: map.get($theme, 'label-text-size');
    letter-spacing: map.get($theme, 'label-text-tracking');
    font-weight: map.get($theme, 'label-text-weight');
  }

  &.md3-segmented-button--selected:enabled {
    .md3-segmented-button__label-text {
      color: map.get($theme, 'selected-label-text-color');
    }

    &:hover {
      .md3-segmented-button__label-text {
        color: map.get($theme, 'selected-hover-label-text-color');
      }
    }

    &:focus {
      .md3-segmented-button__label-text {
        color: map.get($theme, 'selected-focus-label-text-color');
      }
    }

    &:active {
      .md3-segmented-button__label-text {
        color: map.get($theme, 'selected-pressed-label-text-color');
      }
    }
  }

  &.md3-segmented-button--unselected:enabled {
    .md3-segmented-button__label-text {
      color: map.get($theme, 'unselected-label-text-color');
    }

    &:hover {
      .md3-segmented-button__label-text {
        color: map.get($theme, 'unselected-hover-label-text-color');
      }
    }

    &:focus {
      .md3-segmented-button__label-text {
        color: map.get($theme, 'unselected-focus-label-text-color');
      }
    }

    &:active {
      .md3-segmented-button__label-text {
        color: map.get($theme, 'unselected-pressed-label-text-color');
      }
    }
  }

  &:disabled {
    .md3-segmented-button__label-text {
      color: map.get($theme, 'disabled-label-text-color');
    }
  }
}

///
/// Resolve theme returns the given theme with all values resolved.
///
@function resolve-theme($theme, $resolvers) {
  $theme: typography.resolve-theme(
    $theme,
    map.get($resolvers, 'typography'),
    'label-text'
  );
  $theme: _flatten-disabled-colors($theme);
  @return $theme;
}

@function _flatten-disabled-colors($theme) {
  @return color.join-color-and-opacity-pairs(
    $theme,
    (
      (
        color-key: 'disabled-container-color',
        opacity-key: 'disabled-container-opacity'
      ),
      (
        color-key: 'disabled-label-text-color',
        opacity-key: 'disabled-label-text-opacity'
      ),
      (color-key: 'disabled-icon-color', opacity-key: 'disabled-icon-opacity'),
      (
        color-key: 'disabled-outline-color',
        opacity-key: 'disabled-outline-opacity'
      )
    )
  );
}
