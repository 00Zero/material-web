//
// Copyright 2021 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// stylelint-disable selector-class-pattern --
// Selector '.md3-*' should only be used in this project.

@use 'sass:map';
@use 'sass:string';
@use '../../sass/resolvers';
@use '../../sass/shape';
@use '../../sass/theme';
@use '../../sass/var';
@use '../../tokens';
@use './content-theme';
@use './field-theme';
@use './label-theme';
@use './supporting-text-theme';

$_default-deps: (
  md-sys-color: tokens.md-sys-color-values-light-dynamic(),
  md-sys-shape: tokens.md-sys-shape-values(),
  md-sys-state: tokens.md-sys-state-values(),
  md-sys-typescale: tokens.md-sys-typescale-values(),
);

@function values($deps: $_default-deps, $exclude-hardcoded-values: false) {
  $text-field-values: tokens.md-comp-outlined-text-field-values(
    $deps,
    $exclude-hardcoded-values
  );
  // TODO(b/203778922): Remove *-type when type composite tokens are removed
  // Remove unused tokens.
  $values: map.remove(
    $text-field-values,
    caret-color,
    disabled-input-text-color,
    disabled-input-text-opacity,
    error-focus-caret-color,
    error-focus-input-text-color,
    error-hover-input-text-color,
    error-input-text-color,
    focus-input-text-color,
    hover-input-text-color,
    input-text-color,
    input-text-font,
    input-text-line-height,
    input-text-size,
    input-text-tracking,
    input-text-type,
    input-text-weight,
    label-text-type,
    supporting-text-type
  );

  // Add missing tokens.
  $values: map.merge(
    $values,
    (
      container-padding-horizontal: if($exclude-hardcoded-values, null, 16px),
      container-padding-vertical: if($exclude-hardcoded-values, null, 8px),
      content-color: map.get($text-field-values, input-text-color),
      disabled-content-color:
        map.get($text-field-values, disabled-input-text-color),
      disabled-content-opacity:
        map.get($text-field-values, disabled-input-text-opacity),
      error-content-color: map.get($text-field-values, error-input-text-color),
      error-focus-content-color:
        map.get($text-field-values, error-focus-input-text-color),
      error-hover-content-color:
        map.get($text-field-values, error-hover-input-text-color),
      focus-content-color: map.get($text-field-values, focus-input-text-color),
      hover-content-color: map.get($text-field-values, hover-input-text-color),
      label-text-padding-bottom: if($exclude-hardcoded-values, null, 8px),
      outline-label-padding: if($exclude-hardcoded-values, null, 4px),
      supporting-text-padding: if($exclude-hardcoded-values, null, 16px),
      supporting-text-padding-top: if($exclude-hardcoded-values, null, 4px),
    )
  );

  @return $values;
}

$light-theme: values();
$dark-theme: values(
  (
    md-sys-color: tokens.md-sys-color-values-dark-dynamic(),
  ),
  $exclude-hardcoded-values: true
);

@function _resolve-theme($theme, $resolvers) {
  $theme: label-theme.resolve-theme($theme, $resolvers);
  $theme: supporting-text-theme.resolve-theme($theme, $resolvers);
  $theme: shape.resolve-theme(
    $theme,
    map.get($resolvers, shape),
    container-shape
  );
  @return $theme;
}

@mixin theme($theme, $resolvers: resolvers.$material) {
  // Add resolved tokens so that $theme may specify them.
  $reference: map.merge($light-theme, _resolve-theme($light-theme, $resolvers));
  $theme: theme.validate-theme($reference, $theme);
  $theme: _resolve-theme($theme, $resolvers);
  $theme: theme.create-theme-vars($theme, outlined-field);

  @include theme.emit-theme-vars($theme);
}

@mixin theme-styles($theme, $resolvers: resolvers.$material) {
  $theme: theme.validate-theme-styles($light-theme, $theme);
  $theme: _resolve-theme($theme, $resolvers);
  $theme: theme.create-theme-vars($theme, outlined-field);

  @include field-theme.theme-styles($theme);
  @include content-theme.theme-styles($theme);
  @include label-theme.theme-styles($theme);
  @include supporting-text-theme.theme-styles($theme);

  .md3-field__label--floating {
    // Center the label within the outline stroke
    transform: translateY(
      calc(-100% + map.get($theme, label-text-padding-bottom))
    );
  }

  .md3-field__outline {
    border-start-start-radius: map.get($theme, container-shape-start-start);
    border-start-end-radius: map.get($theme, container-shape-start-end);
    border-end-end-radius: map.get($theme, container-shape-end-end);
    border-end-start-radius: map.get($theme, container-shape-end-start);
    border-color: map.get($theme, outline-color);
    color: map.get($theme, outline-color); // Needed for Firefox HCM
  }

  // Add padding that will grow to compensate for the outline's shape.
  // This is needed to prevent the outline border from clipping with the label
  // and is mirrored in the container padding to align the content and resting
  // label with the adjusted floating label.
  $padding: map.get($theme, container-padding-horizontal);
  $shape-start: max(
    map.get($theme, container-shape-start-start),
    map.get($theme, container-shape-end-start)
  );
  $shape-end: max(
    map.get($theme, container-shape-start-end),
    map.get($theme, container-shape-end-end)
  );
  $label-padding: map.get($theme, outline-label-padding);

  .md3-field__outline-start,
  &:not(.md3-field--with-start) .md3-field__start {
    padding-inline-start: max($padding, $shape-start + $label-padding);
  }

  &:not(.md3-field--with-end) {
    .md3-field__end {
      padding-inline-end: max($padding, $shape-end);
    }
  }

  .md3-field__outline-start::before,
  .md3-field__outline-start::after {
    margin-inline-end: map.get($theme, outline-label-padding);
  }

  .md3-field__outline-notch {
    padding: 0 map.get($theme, outline-label-padding);
    margin-inline-start: calc(-1 * map.get($theme, outline-label-padding));
    margin-inline-end: map.get($theme, outline-label-padding);
    max-width: calc(100% - 2 * map.get($theme, container-padding-horizontal));
  }

  .md3-field__outline-end {
    margin-inline-start: calc(-1 * map.get($theme, outline-label-padding));
  }

  .md3-field__outline-start::before,
  .md3-field__outline-end::before,
  .md3-field__outline-panel-inactive,
  .md3-field__outline-panel-inactive::before,
  .md3-field__outline-panel-inactive::after {
    border-width: map.get($theme, outline-width);
  }

  // States

  &:hover {
    .md3-field__outline {
      border-color: map.get($theme, hover-outline-color);
      color: map.get($theme, hover-outline-color); // Needed for Firefox HCM
    }

    .md3-field__outline-start::before,
    .md3-field__outline-end::before,
    .md3-field__outline-panel-inactive,
    .md3-field__outline-panel-inactive::before,
    .md3-field__outline-panel-inactive::after {
      border-width: map.get($theme, hover-outline-width);
    }
  }

  &.md3-field--focused {
    .md3-field__outline {
      border-color: map.get($theme, focus-outline-color);
      color: map.get($theme, focus-outline-color); // Needed for Firefox HCM
    }
  }

  .md3-field__outline-start::after,
  .md3-field__outline-end::after,
  .md3-field__outline-panel-active,
  .md3-field__outline-panel-active::before,
  .md3-field__outline-panel-active::after {
    border-width: map.get($theme, focus-outline-width);
  }

  &.md3-field--disabled {
    .md3-field__outline {
      border-color: map.get($theme, disabled-outline-color);
      color: map.get($theme, disabled-outline-color); // Needed for Firefox HCM
    }

    .md3-field__outline-start,
    .md3-field__outline-end,
    .md3-field__outline-panel-inactive {
      opacity: map.get($theme, disabled-outline-opacity);
    }

    .md3-field__outline-start::before,
    .md3-field__outline-end::before,
    .md3-field__outline-panel-inactive,
    .md3-field__outline-panel-inactive::before,
    .md3-field__outline-panel-inactive::after {
      border-width: map.get($theme, disabled-outline-width);
    }
  }

  &:not(.md3-field--disabled).md3-field--error {
    .md3-field__outline {
      border-color: map.get($theme, error-outline-color);
      color: map.get($theme, error-outline-color); // Needed for Firefox HCM
    }

    &:hover {
      .md3-field__outline {
        border-color: map.get($theme, error-hover-outline-color);
        // Needed for Firefox HCM
        color: map.get($theme, error-hover-outline-color);
      }
    }

    &.md3-field--focused {
      .md3-field__outline {
        border-color: map.get($theme, error-focus-outline-color);
        // Needed for Firefox HCM
        color: map.get($theme, error-focus-outline-color);
      }
    }
  }
}
